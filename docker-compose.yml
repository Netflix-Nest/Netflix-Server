version: "3.8"

services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: netflix-redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - netflix-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: netflix-rabbitmq
    ports:
      - "15672:15672" # Web UI
    environment:
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASS: ${RABBITMQ_PASS}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 60s
    networks:
      - netflix-network
    restart: unless-stopped

  minio:
    image: quay.io/minio/minio:latest
    container_name: netflix-minio
    ports:
      - "9001:9001" # Console UI
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - netflix-network
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    container_name: netflix-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - netflix-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.1
    container_name: netflix-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - netflix-network
    restart: unless-stopped

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=${RABBITMQ_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - netflix-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - REDIS_URL=${REDIS_URL}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - netflix-network
    restart: unless-stopped
    deploy:
      replicas: 1

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - REDIS_URL=${REDIS_URL}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - netflix-network
    restart: unless-stopped
    deploy:
      replicas: 1

  storage-service:
    build:
      context: ./storage-service
      dockerfile: Dockerfile
      target: production
    volumes:
      - video_outputs:/app/outputs
    environment:
      - NODE_ENV=${NODE_ENV}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_USE_SSL=${MINIO_USE_SSL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - netflix-network
    restart: unless-stopped

  job-service:
    build:
      context: ./job-service
      dockerfile: Dockerfile
      target: production
    volumes:
      - video_outputs:/app/outputs
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - netflix-network
    restart: unless-stopped

  video-service:
    build:
      context: ./video-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - netflix-network
    restart: unless-stopped
    deploy:
      replicas: 1

  interaction-service:
    build:
      context: ./interaction-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - netflix-network
    restart: unless-stopped

  engagement-service:
    build:
      context: ./engagement-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - netflix-network
    restart: unless-stopped

  comment-service:
    build:
      context: ./comment-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - REDIS_URL=${REDIS_URL}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - netflix-network
    restart: unless-stopped

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=${RABBITMQ_URL}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/firebase-admin.json
    volumes:
      - ./notification-service/netflix-clone-b65d2-firebase-adminsdk-fbsvc-6a3c0c02cc.json:/app/firebase-admin.json:ro
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - netflix-network
    restart: unless-stopped

  search-service:
    build:
      context: ./search-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=${RABBITMQ_URL}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    networks:
      - netflix-network
    restart: unless-stopped

  recommendation-service:
    build:
      context: ./recommendation-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=${RABBITMQ_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - netflix-network
    restart: unless-stopped

volumes:
  minio_data:
  video_outputs:
  elasticsearch_data:

networks:
  netflix-network:
    driver: bridge
